#!/usr/bin/ruby
Dir.chdir "/"

# drop the container-provided environment as soon quickly as possible; the only
# reliably available tmpfs is /dev, so we dump there and link it under /run
spawn "/usr/bin/s6-dumpenv", "/dev/env"
ENV.clear
ENV["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin/"

tmp_dest = begin File.readlink "tmp" rescue "tmp" end
if !File.exist? tmp_dest
  Dir.mkdir tmp_dest
  File.chmod 01777, tmp_dest
end

run_dest = begin File.readlink "run" rescue "run" end
if !File.exist? run_dest
  Dir.mkdir run_dest
  File.chmod 0755, run_dest
end

IO.popen ["tar", "-cC", "/etc/s6-init/run", "."] do |p|
  system "tar", "-xC", "/run", 0=>p
end

# /tmp available, /run tree ready

# if the user provided a command, exec into that with the container env
ARGV.size > 0 and exec "/etc/s6-init/user-cmd", *ARGV

fifo = "/run/s6/uncaught-logs/in"

module Mkfifo
  require 'fiddle/import'
  extend Fiddle::Importer

  dlload '/bin/sh' # XXX how to find libc
  extern 'int mkfifo(char *, unsigned int)'
end

Mkfifo.mkfifo(fifo, 0600) >= 0 or SystemCallError.new fifo, Fiddle.last_error

log_dest = "/var/log/uncaught"
if !File.exist? log_dest
  Dir.mkdir log_dest
  File.chmod 02700, log_dest

  require 'etc'
  nobody = Etc.getpwnam "nobody"
  File.chown nobody.uid, nobody.gid, log_dest
end

fork do
  open(fifo).close
  exec "/etc/s6-init/stage2", 1=>fifo, 2=>[:child,1]
end

exec "s6-svscan", "-St0", "/run/s6", 1=>fifo, 2=>[:child,1]
